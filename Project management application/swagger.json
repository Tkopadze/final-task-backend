{
  "openapi" : "3.0.0",
  "info" : {
    "version" : "1.1.0-oas3",
    "title" : "Manager app backend",
    "description" : "Manager Application API",
    "license" : "ISC"
  },
  "tags" : [ {
    "name" : "Auth",
    "description" : "API for signIn/signUp"
  }, {
    "name" : "Users",
    "description" : "API for users"
  }, {
    "name" : "Boards",
    "description" : "API for boards"
  }, {
    "name" : "Columns",
    "description" : "API for columns"
  }, {
    "name" : "Tasks",
    "description" : "API for tasks"
  }, {
    "name" : "Files",
    "description" : "API for files"
  }, {
    "name" : "Points",
    "description" : "API for points(checkList in task)"
  } ],
  "paths" : {
    "/auth/signin" : {
      "post" : {
        "tags" : [ "Auth" ],
        "summary" : "SignIn",
        "description" : "Get token",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "login", "password" ],
                "properties" : {
                  "login" : {
                    "type" : "string"
                  },
                  "password" : {
                    "type" : "string"
                  }
                },
                "example" : {
                  "login" : "IMask",
                  "password" : "Tesla4ever"
                }
              }
            }
          },
          "description" : "User auth info"
        },
        "responses" : {
          "200" : {
            "description" : "Successeful login",
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "token" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Authorization error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/signup" : {
      "post" : {
        "tags" : [ "Auth" ],
        "summary" : "SignUp",
        "description" : "Create new User",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "name", "login", "password" ],
                "properties" : {
                  "name" : {
                    "type" : "string"
                  },
                  "login" : {
                    "type" : "string"
                  },
                  "password" : {
                    "type" : "string"
                  }
                },
                "example" : {
                  "name" : "Ilon Mask",
                  "login" : "IMask",
                  "password" : "Tesla4ever"
                }
              }
            }
          },
          "description" : "User that we want to create"
        },
        "responses" : {
          "200" : {
            "description" : "New user is created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "Login already exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users" : {
      "get" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Users" ],
        "summary" : "Get all Users",
        "description" : "Get all Users on server",
        "responses" : {
          "200" : {
            "description" : "All users on server",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}" : {
      "get" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Users" ],
        "summary" : "Get User by Id",
        "description" : "Find User",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "User ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Founded user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "404" : {
            "description" : "User was not founded!",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Users" ],
        "summary" : "Update User by Id",
        "description" : "Update User",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "User ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "name", "login", "password" ],
                "properties" : {
                  "name" : {
                    "type" : "string"
                  },
                  "login" : {
                    "type" : "string"
                  },
                  "password" : {
                    "type" : "string"
                  }
                },
                "example" : {
                  "name" : "Ilon Mask",
                  "login" : "IMask",
                  "password" : "Tesla4ever"
                }
              }
            }
          },
          "description" : "New params"
        },
        "responses" : {
          "200" : {
            "description" : "Updated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "Login already exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Users" ],
        "summary" : "Delete User by Id",
        "description" : "Delete User",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "User ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Deleted user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/boards" : {
      "get" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Boards" ],
        "summary" : "Get all Boards",
        "description" : "Get all Boards on server",
        "responses" : {
          "200" : {
            "description" : "All boards on server",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Board"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Boards" ],
        "summary" : "Create Board",
        "description" : "Create Board",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/NewBoardParams"
        },
        "responses" : {
          "200" : {
            "description" : "Created board",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Board"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/boards/{boardId}" : {
      "get" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Boards" ],
        "summary" : "Get Board by Id",
        "description" : "Find Board",
        "parameters" : [ {
          "name" : "boardId",
          "in" : "path",
          "description" : "Board ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Founded board",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Board"
                }
              }
            }
          },
          "404" : {
            "description" : "Board was not founded!",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Boards" ],
        "summary" : "Update Board by Id",
        "description" : "Update Board",
        "parameters" : [ {
          "name" : "boardId",
          "in" : "path",
          "description" : "Board ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "$ref" : "#/components/requestBodies/NewBoardParams"
        },
        "responses" : {
          "200" : {
            "description" : "Updated board",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Board"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Boards" ],
        "summary" : "Delete Board by Id",
        "description" : "Delete Board",
        "parameters" : [ {
          "name" : "boardId",
          "in" : "path",
          "description" : "Board ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Deleted board",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Board"
                }
              }
            }
          }
        }
      }
    },
    "/boardsSet" : {
      "get" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Boards" ],
        "summary" : "Get Boards by ids list",
        "description" : "Get Boards by list of boardId",
        "parameters" : [ {
          "name" : "ids",
          "in" : "query",
          "description" : "list of boardId",
          "required" : true,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Boards by ids list",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Board"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/boardsSet/{userId}" : {
      "get" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Boards" ],
        "summary" : "Get Boards by userId",
        "description" : "Get Boards where user is owner or one of invited",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "User ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Boards by userId",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Board"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/boards/{boardId}/columns" : {
      "get" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Columns" ],
        "summary" : "Get Columns in Board",
        "description" : "Get Columns in board",
        "parameters" : [ {
          "name" : "boardId",
          "in" : "path",
          "description" : "Board ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "All columns in board",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Column"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Columns" ],
        "summary" : "Create Column",
        "description" : "Create Column in board",
        "parameters" : [ {
          "name" : "boardId",
          "in" : "path",
          "description" : "Board ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "$ref" : "#/components/requestBodies/NewColumnParams"
        },
        "responses" : {
          "200" : {
            "description" : "Created column",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Column"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/boards/{boardId}/columns/{columnId}" : {
      "get" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Columns" ],
        "summary" : "Get Column by Id",
        "description" : "Find Column",
        "parameters" : [ {
          "name" : "boardId",
          "in" : "path",
          "description" : "Board ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "columnId",
          "in" : "path",
          "description" : "Column ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Founded column",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Column"
                }
              }
            }
          },
          "404" : {
            "description" : "Column was not founded!",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Columns" ],
        "summary" : "Update Column by Id",
        "description" : "Update Column",
        "parameters" : [ {
          "name" : "boardId",
          "in" : "path",
          "description" : "Board ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "columnId",
          "in" : "path",
          "description" : "Column ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "$ref" : "#/components/requestBodies/NewColumnParams"
        },
        "responses" : {
          "200" : {
            "description" : "Updated column",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Column"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Columns" ],
        "summary" : "Delete Column by Id",
        "description" : "Delete Column",
        "parameters" : [ {
          "name" : "boardId",
          "in" : "path",
          "description" : "Board ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "columnId",
          "in" : "path",
          "description" : "Column ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Deleted column",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Column"
                }
              }
            }
          }
        }
      }
    },
    "/columnsSet" : {
      "get" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Columns" ],
        "summary" : "Get Columns by ids list or UserId",
        "description" : "Get Columns by list of columnId or in Boards where user is owner or one of invited",
        "parameters" : [ {
          "name" : "ids",
          "in" : "query",
          "description" : "list of columnId",
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "userId",
          "in" : "query",
          "description" : "User ID",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Columns list",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Column"
                  }
                }
              }
            }
          }
        }
      },
      "patch" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Columns" ],
        "summary" : "Update set of Columns",
        "description" : "Change oreder of list of columns",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "required" : [ "_id", "order" ],
                  "properties" : {
                    "_id" : {
                      "type" : "string"
                    },
                    "order" : {
                      "type" : "number"
                    }
                  }
                }
              }
            }
          },
          "description" : "list of new params",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Updated columns",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Column"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Columns" ],
        "summary" : "Create set of Columns",
        "description" : "Create set of Columns",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "required" : [ "title", "order", "boardId" ],
                  "properties" : {
                    "title" : {
                      "type" : "string"
                    },
                    "order" : {
                      "type" : "number"
                    },
                    "boardId" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "description" : "list of new columns",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Created columns",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Column"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/boards/{boardId}/columns/{columnId}/tasks" : {
      "get" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Tasks" ],
        "summary" : "Get Tasks in Column",
        "description" : "Get Tasks in columns",
        "parameters" : [ {
          "name" : "boardId",
          "in" : "path",
          "description" : "Board ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "columnId",
          "in" : "path",
          "description" : "Column ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "All tasks in column",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Task"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Tasks" ],
        "summary" : "Create Task",
        "description" : "Create Task in column",
        "parameters" : [ {
          "name" : "boardId",
          "in" : "path",
          "description" : "Board ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "columnId",
          "in" : "path",
          "description" : "Column ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "title", "order", "description", "userId", "users" ],
                "properties" : {
                  "title" : {
                    "type" : "string"
                  },
                  "order" : {
                    "type" : "number"
                  },
                  "description" : {
                    "type" : "string"
                  },
                  "userId" : {
                    "type" : "number"
                  },
                  "users" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "description" : "New params"
        },
        "responses" : {
          "200" : {
            "description" : "Created task",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Task"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/boards/{boardId}/columns/{columnId}/tasks/{taskId}" : {
      "get" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Tasks" ],
        "summary" : "Get Task by Id",
        "description" : "Find Task",
        "parameters" : [ {
          "name" : "boardId",
          "in" : "path",
          "description" : "Board ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "columnId",
          "in" : "path",
          "description" : "Column ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "taskId",
          "in" : "path",
          "description" : "Task ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Founded task",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Task"
                }
              }
            }
          },
          "404" : {
            "description" : "Task was not founded!",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Tasks" ],
        "summary" : "Update Task by Id",
        "description" : "Update Task",
        "parameters" : [ {
          "name" : "boardId",
          "in" : "path",
          "description" : "Board ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "columnId",
          "in" : "path",
          "description" : "Column ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "taskId",
          "in" : "path",
          "description" : "Task ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "title", "order", "description", "columnId", "userId", "users" ],
                "properties" : {
                  "title" : {
                    "type" : "string"
                  },
                  "order" : {
                    "type" : "number"
                  },
                  "description" : {
                    "type" : "string"
                  },
                  "columnId" : {
                    "type" : "string"
                  },
                  "userId" : {
                    "type" : "number"
                  },
                  "users" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "description" : "New params"
        },
        "responses" : {
          "200" : {
            "description" : "Updated task",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Task"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Tasks" ],
        "summary" : "Delete Task by Id",
        "description" : "Delete Task",
        "parameters" : [ {
          "name" : "boardId",
          "in" : "path",
          "description" : "Board ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "columnId",
          "in" : "path",
          "description" : "Column ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "taskId",
          "in" : "path",
          "description" : "Task ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Deleted task",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Task"
                }
              }
            }
          }
        }
      }
    },
    "/tasksSet" : {
      "get" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Tasks" ],
        "summary" : "Get Tasks by ids list, UserId or search request",
        "description" : "Get Tasks by list of taskId or in Boards where user is owner or one of invited, or by search request",
        "parameters" : [ {
          "name" : "ids",
          "in" : "query",
          "description" : "list of columnId",
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "userId",
          "in" : "query",
          "description" : "User ID",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "search request. In title, description and names of owner and responsible users",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Tasks list",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Task"
                  }
                }
              }
            }
          }
        }
      },
      "patch" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Tasks" ],
        "summary" : "Update set of Tasks",
        "description" : "Change oreder and column of list of tasks",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "required" : [ "_id", "order", "columnId" ],
                  "properties" : {
                    "_id" : {
                      "type" : "string"
                    },
                    "order" : {
                      "type" : "number"
                    },
                    "columnId" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "description" : "list of new params",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Updated tasks",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tasksSet/{boardId}" : {
      "get" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Tasks" ],
        "summary" : "Get Tasks by Board Id",
        "description" : "Get Tasks in selected Board",
        "parameters" : [ {
          "name" : "boardId",
          "in" : "path",
          "description" : "Board ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Tasks list",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Task"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/file" : {
      "get" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Files" ],
        "summary" : "Get Files by ids list, UserId or TaskId",
        "description" : "Get Files by list of taskId or in Boards where user is owner or one of invited, or by TaskId",
        "parameters" : [ {
          "name" : "ids",
          "in" : "query",
          "description" : "list of columnId",
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "userId",
          "in" : "query",
          "description" : "User ID",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "taskId",
          "in" : "query",
          "description" : "TaskId",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Files list",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/File"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Files" ],
        "summary" : "Upload file",
        "description" : "upload file to deployUrl/files/",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "boardId" : {
                    "description" : "Board Id",
                    "type" : "string"
                  },
                  "taskId" : {
                    "description" : "Task Id",
                    "type" : "string"
                  },
                  "file" : {
                    "description" : "File to upload",
                    "type" : "string",
                    "format" : "binary"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Uploaded File",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/File"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "402" : {
            "description" : "File already exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/file/{boardId}" : {
      "get" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Files" ],
        "summary" : "Get Files by BoardId",
        "description" : "Get files by BoardId",
        "parameters" : [ {
          "name" : "boardId",
          "in" : "path",
          "description" : "Board ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Founded files",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/File"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/file/{fileId}" : {
      "delete" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Files" ],
        "summary" : "Delete File by Id",
        "description" : "Delete File by Id",
        "parameters" : [ {
          "name" : "fileId",
          "in" : "path",
          "description" : "File ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Deleted file",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/File"
                }
              }
            }
          }
        }
      }
    },
    "/points" : {
      "get" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Points" ],
        "summary" : "Get Points by ids list or UserId",
        "description" : "Get Points by list of pointId or in Boards where user is owner or one of invited",
        "parameters" : [ {
          "name" : "ids",
          "in" : "query",
          "description" : "list of pointId",
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "userId",
          "in" : "query",
          "description" : "User ID",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Points list",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Point"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Points" ],
        "summary" : "Create Point",
        "description" : "Create a new point",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "title", "taskId", "boardId", "done" ],
                "properties" : {
                  "title" : {
                    "type" : "string"
                  },
                  "taskId" : {
                    "type" : "string"
                  },
                  "boardId" : {
                    "type" : "string"
                  },
                  "done" : {
                    "type" : "boolean"
                  }
                }
              }
            }
          },
          "description" : "New params"
        },
        "responses" : {
          "200" : {
            "description" : "Created Point",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Point"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "402" : {
            "description" : "File already exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Points" ],
        "summary" : "Update set of Points",
        "description" : "Change done filed in set of points",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "required" : [ "_id", "done" ],
                  "properties" : {
                    "_id" : {
                      "type" : "string"
                    },
                    "done" : {
                      "type" : "boolean"
                    }
                  }
                }
              }
            }
          },
          "description" : "list of new params",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Updated Points",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Point"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "402" : {
            "description" : "File already exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/points/{taskId}" : {
      "get" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Points" ],
        "summary" : "Get Points by TaskId",
        "description" : "Get Points by TaskId",
        "parameters" : [ {
          "name" : "taskId",
          "in" : "path",
          "description" : "Task ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Founded Points",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Point"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/points/{pointId}" : {
      "patch" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Points" ],
        "summary" : "Update Point",
        "description" : "Change title and done",
        "parameters" : [ {
          "name" : "pointId",
          "in" : "path",
          "description" : "Point ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "title", "done" ],
                "properties" : {
                  "title" : {
                    "type" : "string"
                  },
                  "done" : {
                    "type" : "boolean"
                  }
                }
              }
            }
          },
          "description" : "New params"
        },
        "responses" : {
          "200" : {
            "description" : "Updated column",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Column"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "tags" : [ "Points" ],
        "summary" : "Delete Point by Id",
        "description" : "Delete Point by Id",
        "parameters" : [ {
          "name" : "pointId",
          "in" : "path",
          "description" : "Point ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Deleted Point",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/File"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "requestBodies" : {
      "NewBoardParams" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "required" : [ "title", "owner", "users" ],
              "properties" : {
                "title" : {
                  "type" : "string"
                },
                "owner" : {
                  "type" : "string"
                },
                "users" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "description" : "New params"
      },
      "NewColumnParams" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "required" : [ "title", "order" ],
              "properties" : {
                "title" : {
                  "type" : "string"
                },
                "order" : {
                  "type" : "number"
                }
              }
            }
          }
        },
        "description" : "New params"
      }
    },
    "securitySchemes" : {
      "Bearer" : {
        "type" : "apiKey",
        "name" : "Authorization",
        "description" : "Enter your token in format *Bearer token*",
        "in" : "header"
      }
    },
    "schemas" : {
      "User" : {
        "required" : [ "_id", "name", "login" ],
        "properties" : {
          "_id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "login" : {
            "type" : "string"
          }
        }
      },
      "Board" : {
        "required" : [ "_id", "title", "owner", "users" ],
        "properties" : {
          "_id" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "owner" : {
            "type" : "string"
          },
          "users" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "example" : {
          "_id" : "Board id",
          "title" : "Board title",
          "owner" : "userId of owner",
          "users" : [ "userId of invited user #1", "userId of invited user #2" ]
        }
      },
      "Column" : {
        "required" : [ "_id", "title", "order", "boardId" ],
        "properties" : {
          "_id" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "order" : {
            "type" : "number"
          },
          "boardId" : {
            "type" : "string"
          }
        },
        "example" : {
          "_id" : "Column id",
          "title" : "Column title",
          "order" : 1,
          "boardId" : "Id of boards"
        }
      },
      "Task" : {
        "required" : [ "_id", "title", "order", "boardId", "columnId", "description", "userId", "users" ],
        "properties" : {
          "_id" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "order" : {
            "type" : "number"
          },
          "boardId" : {
            "type" : "string"
          },
          "columnId" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "userId" : {
            "type" : "number"
          },
          "users" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "example" : {
          "_id" : "Task id",
          "title" : "Task title",
          "order" : 0,
          "boardId" : "id of board",
          "columnId" : "id of column",
          "description" : "Task decription",
          "userId" : "userId of task owner",
          "users" : [ "userId of responsible user #1", "userId of responsible user #2" ]
        }
      },
      "File" : {
        "required" : [ "_id", "name", "taskId", "boardId", "path" ],
        "properties" : {
          "_id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "taskId" : {
            "type" : "string"
          },
          "boardId" : {
            "type" : "string"
          },
          "path" : {
            "type" : "string"
          }
        },
        "example" : {
          "_id" : "File id",
          "name" : "example.img",
          "taskId" : "id of task",
          "boardId" : "id of board",
          "path" : "files/taskId-name"
        }
      },
      "Point" : {
        "required" : [ "_id", "title", "taskId", "boardId", "done" ],
        "properties" : {
          "_id" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "taskId" : {
            "type" : "number"
          },
          "boardId" : {
            "type" : "string"
          },
          "done" : {
            "type" : "boolean"
          }
        },
        "example" : {
          "_id" : "Point id",
          "title" : "Point title",
          "taskId" : "Id of task",
          "boardId" : "Id of board",
          "done" : false
        }
      },
      "ErrorResponse" : {
        "required" : [ "statusCode", "message" ],
        "properties" : {
          "statusCode" : {
            "type" : "number"
          },
          "message" : {
            "type" : "string"
          }
        },
        "example" : {
          "statusCode" : "4xx",
          "message" : "reason"
        }
      }
    }
  }
}